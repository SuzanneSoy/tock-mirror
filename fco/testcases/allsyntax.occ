-- This file aims to exercise every bit of occam2.1 syntax.
-- As such, it should compile (with loads of warnings), but not actually do anything when run.

-- Still to check: line continuation rules.

PROC test.syntax ()
  INT x, y, a, b:
  [10]INT xs:
  BOOL la, lb, lc:
  BYTE bb:
  REAL32 f:
  CHAN OF INT c:
  [10]CHAN OF INT cs:
  [10][10]CHAN OF INT css:
  PROTOCOL P
    CASE
      foo
      bar
  :
  CHAN OF P cc:
  DATA TYPE R
    RECORD
      INT a:
      INT b:
  :

  SEQ
    -- abbreviation
    xx IS x:
    SKIP
    INT xx IS x:
    SKIP
    VAL xx IS x:
    SKIP
    VAL INT xx IS x:
    SKIP

    -- allocation
    [2]INT q:
    -- Doesn't work in KRoC.
    PLACE q AT 12345:
    SKIP

    -- alternation
    ALT
      c ? x
        SKIP
      TRUE & SKIP
        SKIP
    ALT i = 0 FOR 10
      cs[i] ? xs[i]
        SKIP
    PRI ALT
      c ? x
        SKIP
      TRUE & SKIP
        SKIP
    PRI ALT i = 0 FOR 10
      cs[i] ? xs[i]
        SKIP
    xx IS x:
    ALT
      TRUE & SKIP
        SKIP

    -- alternative
    ALT
      TRUE & cc ? CASE
        foo
          SKIP
        bar
          STOP
      cc ? CASE
        foo
          SKIP
        bar
          STOP

    -- assignment
    x := y
    x, y := a, b

    -- byte
    bb := 'x'

    -- caseInput
    cc ? CASE
      foo
        SKIP
      bar
        STOP

    -- channel
    css[4][2] ? x
    cs[4] ? x
    c ? x
    [cs FROM 1 FOR 2][1] ? x
    [cs FROM 0][4] ? x
    [cs FOR 2][1] ? x

    -- channelType
    CHAN OF INT q:
    [10]CHAN OF INT qs:
    SKIP

    -- character
    bb := 'x'
    bb := '*c'
    bb := '*#FF'

    -- occamChoice
    INT x:
    IF
      TRUE
        SKIP

    -- conditional
    IF
      TRUE
        SKIP
      FALSE
        STOP
      IF i = 0 FOR 42
        xs[i] = 11
          STOP

    -- conversion
    x := INT bb
    f := REAL32 ROUND x
    f := REAL32 TRUNC x

    -- dataType
    BOOL a:
    BYTE a:
    INT a:
    INT16 a:
    INT32 a:
    INT64 a:
    REAL32 a:
    REAL64 a:
    [10]INT a:
    R a:
    SKIP

    -- declaration
    INT a:
    INT a, b, c:
    SKIP

    -- definition
    DATA TYPE T1 IS INT:
    DATA TYPE T2
      RECORD
        INT x:
    :
    PROTOCOL P1 IS INT; INT:
    PROTOCOL P2 IS ANY:
    PROTOCOL P3
      CASE
        foo
    :
    PROC p1 (INT x)
      SKIP
    :
    INT FUNCTION f1 (VAL INT x) IS x:
    INT FUNCTION f2 (VAL INT x)
      VALOF
        SKIP
        RESULT x
    :
    INT xx RETYPES x:
    INT xx RESHAPES x:
    VAL INT xx RETYPES x:
    VAL INT xx RESHAPES x:
    SKIP

    -- dyadicOperator
    x := a + b
    x := a - b
    x := a * b
    x := a / b
    x := a \ b
    x := a REM b
    x := a PLUS b
    x := a MINUS b
    x := a TIMES b
    x := lb /\ lc
    x := lb \/ lc
    x := lb >< lc
    x := lb BITAND lc
    x := lb BITOR lc
    la := lb AND lc
    la := lb OR lc
    la := a = b
    la := a <> b
    la := a < b
    la := a > b
    la := a <= b
    la := a >= b
    la := a AFTER b

    -- occamExponent
    f := 1.2345e+67
    f := 1.2345e-67

    -- expression
    x := -a
    x := MOSTPOS INT
    x := MOSTNEG INT
    x := SIZE INT
    x := a + b

    -- expressionList
    INT, INT FUNCTION twofunc (VAL INT x, y) IS x, y:
    a, b := twofunc (x, y)
    a, b := x, y

    -- real
    f := 1.2345e+67
    f := 1.2345
:
